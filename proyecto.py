# -*- coding: utf-8 -*-
"""Proyecto

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dNv2UcDt7gho-XtKlwmL3AMA_56U5yv-

## Instalacion de librerias
"""

!pip install pandas matplotlib geopy timezonefinder pvlib requests

"""## Codigo de la app"""

#importacion de librerias necesarias
import pandas as pd
import matplotlib.pyplot as plt
import requests
from calendar import monthrange
from geopy.geocoders import Nominatim
from timezonefinder import TimezoneFinder
from pvlib.location import Location
from pvlib import irradiance, temperature, pvsystem

# Entradas del usuario
ciudad = input("Ciudad (ej: Medellin, Colombia): ") or "Medellin, Colombia"
año = int(input("Año (YYYY): ") or "2025")
mes = int(input("Mes (1-12): ") or "9")
inclinacion = float(input("Inclinación del panel [°]: ") or "20")
azimut = float(input("Azimut del panel [°] (0=N, 180=S): ") or "180")
sistema_kw = float(input("Tamaño del sistema [kW]: ") or "1.5")

# Parámetros fijos
albedo = 0.2
temp_ambiente = 25.0
viento = 1.0
coef_temp = -0.004
paso_min = 30

# Ubicación (lat/lon/tz)
geo = Nominatim(user_agent="solar_mes")
lugar = geo.geocode(ciudad)
if lugar is None:
    raise ValueError("No se encontró la ciudad.")
zona_horaria = TimezoneFinder().timezone_at(lat=lugar.latitude, lng=lugar.longitude) or "UTC"

# Tiempos del mes
dias_mes = monthrange(año, mes)[1]
inicio = f"{año}-{mes:02d}-01 05:00"
fin = f"{año}-{mes:02d}-{dias_mes:02d} 18:30"
tiempos = pd.date_range(inicio, fin, freq=f"{paso_min}min", tz=zona_horaria)

#  Posición solar y cielo despejado
sitio = Location(lugar.latitude, lugar.longitude, tz=zona_horaria, name=ciudad)
sol = sitio.get_solarposition(tiempos)
cielo = sitio.get_clearsky(tiempos, model="ineichen")

# Irradiancia y potencia modelo
poa_modelo = irradiance.get_total_irradiance(
    surface_tilt=inclinacion, surface_azimuth=azimut,
    dni=cielo["dni"], ghi=cielo["ghi"], dhi=cielo["dhi"],
    solar_zenith=sol["zenith"], solar_azimuth=sol["azimuth"],
    albedo=albedo
)["poa_global"]

temp_celda_modelo = temperature.sapm_cell(poa_modelo, temp_ambiente, viento, a=-3.56, b=-0.075, deltaT=3)
potencia_pico_w = sistema_kw * 1000
potencia_modelo = pvsystem.pvwatts_dc(poa_modelo, temp_celda_modelo, potencia_pico_w, coef_temp)

# Energía diaria y resumen
delta_horas = (tiempos[1] - tiempos[0]).total_seconds()/3600.0
energia_dia_modelo = (potencia_modelo.fillna(0).resample("D").sum() * delta_horas) / 1000.0
energia_dia_modelo.index = energia_dia_modelo.index.strftime("%Y-%m-%d")

energia_mes = energia_dia_modelo.sum()
mejor_dia = energia_dia_modelo.idxmax()

# Gráfica energía diaria
plt.figure(figsize=(10,5))
energia_dia_modelo.plot(kind="bar")
plt.title(f"Energía diaria – {ciudad} ({año}-{mes:02d}) – Modelo despejado")
plt.ylabel("kWh"); plt.xlabel("Día")
plt.grid(True, axis="y", alpha=0.3)
plt.tight_layout(); plt.show()

# Gráfica altitud solar del mejor dia
dia_ok = pd.to_datetime(mejor_dia)
filtro_mejor = (tiempos.date == dia_ok.date())
plt.figure(figsize=(10,4))
sol.loc[filtro_mejor, "apparent_elevation"].plot()
plt.title(f"Altitud solar – {ciudad} – {mejor_dia}")
plt.ylabel("Altitud [°]"); plt.grid(True)
plt.tight_layout(); plt.show()

# Descargar datos de ERA5 del mejor dia
def bajar_era5_dia(lat, lon, tzname, fecha):
    url = "https://archive-api.open-meteo.com/v1/era5"
    params = {
        "latitude": lat, "longitude": lon, "timezone": tzname,
        "start_date": fecha, "end_date": fecha,
        "hourly": "shortwave_radiation,diffuse_radiation,"
                  "direct_normal_irradiance,temperature_2m,windspeed_10m"
    }
    r = requests.get(url, params=params, timeout=30)
    r.raise_for_status()
    df = pd.DataFrame(r.json()["hourly"])
    df["time"] = pd.to_datetime(df["time"])
    df.set_index("time", inplace=True)
    return df.rename(columns={
        "shortwave_radiation":"GHI",
        "diffuse_radiation":"DHI",
        "direct_normal_irradiance":"DNI",
        "temperature_2m":"T2m",
        "windspeed_10m":"WS10m"
    })

dia_texto = dia_ok.strftime("%Y-%m-%d")
datos_reales = bajar_era5_dia(lugar.latitude, lugar.longitude, zona_horaria, dia_texto)

# POA y potencia con ERA5
sol_real = sitio.get_solarposition(datos_reales.index)
poa_real = irradiance.get_total_irradiance(
    surface_tilt=inclinacion, surface_azimuth=azimut,
    dni=datos_reales["DNI"], ghi=datos_reales["GHI"], dhi=datos_reales["DHI"],
    solar_zenith=sol_real["zenith"], solar_azimuth=sol_real["azimuth"],
    albedo=albedo
)["poa_global"]

temp_celda_real = temperature.sapm_cell(poa_real, datos_reales["T2m"], datos_reales["WS10m"],
                                        a=-3.56, b=-0.075, deltaT=3)
potencia_real = pvsystem.pvwatts_dc(poa_real, temp_celda_real, potencia_pico_w, coef_temp)

# Comparacion de Energia simulada vs Energia Real
delta_horas_real = (potencia_real.index[1] - potencia_real.index[0]).total_seconds()/3600.0
energia_modelo_mejor = (potencia_modelo.loc[filtro_mejor].fillna(0).sum() * delta_horas) / 1000.0
energia_real_mejor   = (potencia_real.fillna(0).sum() * delta_horas_real) / 1000.0

# Comparacion de graficas
plt.figure(figsize=(10,7))
plt.subplot(2,1,1)
poa_modelo.loc[filtro_mejor].plot(label="POA modelo", color="orange")
poa_real.plot(label="POA ERA5", color="red", alpha=0.75)
plt.ylabel("POA [W/m²]"); plt.title(f"{ciudad} – {dia_texto} – Modelo vs ERA5")
plt.legend(); plt.grid(True)

plt.subplot(2,1,2)
potencia_modelo.loc[filtro_mejor].plot(label="Potencia modelo", color="blue")
potencia_real.plot(label="Potencia ERA5", color="purple", alpha=0.75)
plt.ylabel("Potencia [W]"); plt.legend(); plt.grid(True)
plt.tight_layout(); plt.show()

# -------- Barras energía mejor día --------
plt.figure(figsize=(6,4))
plt.bar(["Modelo\n(despejado)", "Real\n(ERA5)"], [energia_modelo_mejor, energia_real_mejor])
plt.ylabel("Energía [kWh]"); plt.title(f"Energía diaria – {dia_texto}")
plt.grid(True, axis="y", alpha=0.3)
plt.tight_layout(); plt.show()